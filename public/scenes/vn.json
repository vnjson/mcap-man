{
  "$root": {
    "assets": [
      {
        "name": "6m",
        "url": "./scenes/assets/6m.mp3"
      },
      {
        "name": "Alice",
        "url": "./scenes/assets/Alice.png"
      },
      {
        "name": "class-room",
        "url": "./scenes/assets/class-room.webp"
      },
      {
        "name": "configurator-screen",
        "url": "./scenes/assets/configurator-screen.png"
      },
      {
        "name": "configurator",
        "url": "./scenes/assets/configurator.png"
      },
      {
        "name": "earch",
        "url": "./scenes/assets/earch.jpg"
      },
      {
        "name": "empty-project",
        "url": "./scenes/assets/empty-project.png"
      },
      {
        "name": "iron",
        "url": "./scenes/assets/iron.png"
      },
      {
        "name": "kkkk",
        "url": "./scenes/assets/kkkk.mp3"
      },
      {
        "name": "lab",
        "url": "./scenes/assets/lab.webp"
      },
      {
        "name": "lake",
        "url": "./scenes/assets/lake.webp"
      },
      {
        "name": "library",
        "url": "./scenes/assets/library.webp"
      },
      {
        "name": "linux",
        "url": "./scenes/assets/linux.png"
      },
      {
        "name": "location",
        "url": "./scenes/assets/location.png"
      },
      {
        "name": "luna",
        "url": "./scenes/assets/luna.webp"
      },
      {
        "name": "lunyanin",
        "url": "./scenes/assets/lunyanin.png"
      },
      {
        "name": "main-theme",
        "url": "./scenes/assets/main-theme.mp3"
      },
      {
        "name": "mars",
        "url": "./scenes/assets/mars.jpg"
      },
      {
        "name": "marsianin",
        "url": "./scenes/assets/marsianin.webp"
      },
      {
        "name": "mars_delat_nechego",
        "url": "./scenes/assets/mars_delat_nechego.webp"
      },
      {
        "name": "neo",
        "url": "./scenes/assets/neo.png"
      },
      {
        "name": "Nora",
        "url": "./scenes/assets/Nora.png"
      },
      {
        "name": "pc",
        "url": "./scenes/assets/pc.png"
      },
      {
        "name": "pianino",
        "url": "./scenes/assets/pianino.mp3"
      },
      {
        "name": "port",
        "url": "./scenes/assets/port.png"
      },
      {
        "name": "rozario_agro",
        "url": "./scenes/assets/rozario_agro.mp3"
      },
      {
        "name": "server_name",
        "url": "./scenes/assets/server_name.png"
      },
      {
        "name": "ship",
        "url": "./scenes/assets/ship.png"
      },
      {
        "name": "tag-n",
        "url": "./scenes/assets/tag-n.png"
      },
      {
        "name": "tag-port",
        "url": "./scenes/assets/tag-port.png"
      },
      {
        "name": "term",
        "url": "./scenes/assets/term.png"
      },
      {
        "name": "terminal",
        "url": "./scenes/assets/terminal.png"
      },
      {
        "name": "tmux",
        "url": "./scenes/assets/tmux.png"
      },
      {
        "name": "web-display-right-click",
        "url": "./scenes/assets/web-display-right-click.png"
      },
      {
        "name": "WebDisplays",
        "url": "./scenes/assets/WebDisplays.png"
      }
    ],
    "$init": [
      {
        "clear": "all",
        "next": true
      },
      {
        "scene": "class-room",
        "menu": {
          "tutorial.entry": "Начало работы",
          "terminal.$init": "Знакомство с терминалом",
          "tutorial.setup": "Установка шаблона",
          "tutorial.scenesAndLabels": "Сцены и метки",
          "tutorial.define-chars": "Объявление персонажей",
          "tutorial.dialog": "Написание диалогов",
          "tutorial.nav": "Навигация по скрипту",
          "tutorial.images": "Работа с изображениями",
          "tutorial.audio": "Воспроизведение аудио",
          "tutorial.embed": "Подключение внешних ресурсов",
          "tutorial.dta": "Работа с данными",
          "tutorial.zim": "Подключение ZIMjs",
          "plugins.$init": "Плагины",
          "onClick": {
            "dialog-box": true
          }
        }
      }
    ],
    "characters": [
      {
        "id": "$",
        "name": ". . . .",
        "nameColor": "#49de58",
        "replyColor": "#b2d5f5"
      },
      {
        "id": "a",
        "name": "Алиса",
        "nameColor": "#bb38c7",
        "replyColor": "#cb86d1"
      },
      {
        "id": "ex",
        "name": "Exec",
        "nameColor": "red",
        "replyColor": "brown"
      },
      {
        "id": "s",
        "name": "Сергей",
        "nameColor": "rgb(120, 33, 170)",
        "replyColor": "#11bef2"
      },
      {
        "id": "m",
        "name": "Марсианин",
        "nameColor": "#ff660d",
        "replyColor": "#de6118"
      },
      {
        "id": "lu",
        "name": "Лунянин",
        "nameColor": "#08ffef",
        "replyColor": "#10ded0"
      }
    ],
    "data": {
      "chars1.yaml": "\"/$root\\n├───$init.yaml\\n├───package.yaml\\n└───characters.yaml\\n\"",
      "chars2.yaml": "\"- id: $\\n\\n\"",
      "chars3.yaml": "\"- id: $\\n  name: . . . .\\n\"",
      "chars4.yaml": "\"- id: $\\n  name: . . . .\\n  nameColor: '#49de58'\\n\"",
      "chars5.yaml": "\"- id: $\\n  name: . . . .\\n  nameColor: '#49de58'\\n  replyColor: '#b2d5f5'\"",
      "chars6.yaml": "\"- id: $\\n  name: . . . .\\n  nameColor: '#49de58'\\n  replyColor: '#b2d5f5'\\n\\n- id: a\\n  name: Алиса\\n  nameColor: '#bb38c7'\\n  replyColor: '#cb86d1'\\n\"",
      "chars7.yaml": "\"- id: $\\n  name: . . . .\\n  nameColor: '#49de58'\\n  replyColor: '#b2d5f5'\\n\\n- id: a\\n  name: Алиса\\n  nameColor: '#bb38c7'\\n  replyColor: '#cb86d1'\\n\\n- id: s\\n  name: Сергей\\n  nameColor: rgb( 120, 33, 170 )\\n  replyColor: '#11bef2'\"",
      "chars7_1.yaml": "\"- id: $\\n  name: . . . .\\n  nameColor: '#49de58'\\n  replyColor: '#b2d5f5'\\n\\n- id: a\\n  name: Алиса\\n  nameColor: '#bb38c7'\\n  replyColor: '#cb86d1'\\n\\n- id: s\\n  name: Сергей\\n  nameColor: rgb( 120, 33, 170 )\\n  replyColor: '#11bef2'\\n\\n- id: ex\\n  name: Exec\\n  nameColor: red\\n  replyColor: brown\"",
      "chars8.yaml": "\"- a: Там на неведомых дорожках\\n- s: Следы невиданных зверей;\\n- a: Избушка там на курьих ножках\\n- Стоит без окон, без дверей;\\n- Строка без индификатора произносится от имени автора\\n- s: Там лес и дол видений полны;\\n- $: Там о заре прихлынут волны\\n- ex: Индификатор можнет содержать больше чем один символ\\n- $: Символ $ зарезервирован за автором в файле characters.yaml\\n- a: На брег песчаный и пустой,\\n- И тридцать витязей прекрасных\\n- Чредой из вод выходят ясных,\\n- s: И с ними дядька их морской;\\n- jump: $root.$init\"",
      "embed.yaml": "\"# ./src/scenes/$root/embed.yaml\\nkey1: <iframe width=\\\"100%\\\" height=\\\"570px\\\" src=\\\"https://...\\\"></iframe>\\nkey2:  <iframe width=\\\"100%\\\" height=\\\"570px\\\" src=\\\"https://...\\\"></iframe>\"",
      "embed2.yaml": "\"- key1: true\\n  $: Показ внешнего ресурся\\n\\n- key2: true\\n  key1: false #скрыть\\n  $: Показ второго внешнего ресурся\\n\\n- key2: false\\n  jump: $root.$init\"",
      "images.yaml": "\"\\n- scene: imagename\\n- scene: false\\n\\n- slide: imagename\\n- slide: false\\n\\n- center: imagename1\\n- left: imagename2\\n- right: imagename3\\n\\n- center: false\\n- left: false\\n- right: false\\n\\n- term: imagename\\n\\n- term: false\"",
      "reply1.yaml": "\"- dialog-box: true\\n  $: Что бы отображались реплики, \\n     необходимо сначала отобразить диалоговое окно\\n- a: Там королевич мимоходом\\n- a: Пленяет грозного царя;\\n- s: Там в облаках перед народом\\n- Через леса, через моря\\n- s: Колдун несёт богатыря;\\n- В темнице там царевна тужит,\\n- $: А бурый волк ей верно служит;\\n- a: В некоторых случаях требуется скрыть диалоговое окно. \\n  dialog-box: false\\n\\n\"",
      "reply2.yaml": "\"- \\\"Что бы экранировать специальные символы !! %% && :: '' ##  заключите строку в ковычки\\\"\\n- $: Реплика внутри объекта\\n  \\n- a: Реплика от другого персонажа\\n- $: 'Использование html тегов внутри  <i style=\\\"color: #d405f0\\\">реплики</i>'\\n\\n\\n- '1111111' #- 1111111 # просто цифры в строке необходимо экранировать иначе не выполнится\\n- 1111test  # так можно\\n- test 1111  # так можно\\n- $: 1111111 # так тоже работает\\n\\n- jump: $root.$init\"",
      "scenes1.yaml": "\"/scenes/\\n├───book_0\\n├───book_1\\n├───book_2\\n├───book_3\\n├───book_4\\n├───book_5\\n├───book_6\\n├───book_7\\n├───book_8\\n└───book_9\\n\\n\"",
      "scenes2.yaml": "\"/scenes/\\n├───book_1\\n│   ├───chapter_1\\n│   ├───chapter_2\\n│   └───chapter_3\\n├───book_2\\n│   ├───chapter_1\\n│   ├───chapter_2\\n│   └───chapter_3\\n└───book_3\\n    ├───chapter_1\\n    ├───chapter_2\\n    └───chapter_3\\n\"",
      "scenes3.yaml": "\"\\n/scenes\\n└───$root\\n    └───$init.yaml\\n\"",
      "scenes31.yaml": "\"/scenes/\\n├───$root\\n│   ├───$init.yaml\\n│   ├───chapter1.yaml\\n│   └───chapter2.yaml\\n├───scene1\\n│   ├───$init.yaml\\n│   ├───chapter1.yaml\\n│   └───chapter2.yaml\\n└───scene2\\n    ├───$init.yaml\\n    ├───chapter1.yaml\\n    └───chapter2.yaml\\n\"",
      "scenes4.yaml": "\"- dialog-box: true\\n  next: true  \\n- У лукоморья дуб зелёный;\\n- Златая цепь на дубе том\\n- И днём и ночью кот учёный\\n- Всё ходит по цепи кругом;\\n- Идёт направо — песнь заводит,\\n- Налево — сказку говорит.\\n- Там чудеса там леший бродит,\\n- Русалка на ветвях сидит;\\n- jump: $init\"",
      "scenes5.yaml": "\"/scenes\\n└───$root\\n    ├───$init.yaml\\n    └───package.yaml\\n\\n# package.yaml\\nname: Название\\ndebug: true  #false\\npreload: true # false\"",
      "setup1.yaml": "\"# git clone https://github.com/vnjson/mcap.git\"",
      "setup2.yaml": "\"# cd ./mcap\\n\\n/mcap\\n├───public\\n├───src\\n├───9000\\n├───rollup.config.js\\n└───package.json\\n\"",
      "setup3.yaml": "\"# npm install\"",
      "setup4.yaml": "\"# npm run dev\\n\"",
      "setup5.yaml": "\"# cd ./scenes\\n\\n/src/scenes\\n└───$root\\n    └───$init.yaml\\n\"",
      "setup6.yaml": "\"Команды предварительной подготовки\\n1 # git clone https://github.com/vnjson/mcap.git\\n2 # cd ./mcap\\n3 # npm install\\n4 # mv 9000 9001\\n5 # npm run dev\\n\""
    },
    "embed": {
      "key1": "<iframe width=\"800\" height=\"450\" src=\"https://www.youtube.com/embed/7E_yOnAWdUk?start=62\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"
    },
    "package": {
      "name": "Руководство издателя",
      "version": "0.8.5",
      "debug": false,
      "preload": true
    }
  },
  "planets": {
    "assets": [],
    "data": {
      "content_1.yaml": "\"- content:\\n    - $root.$init: Том 1\\n      disabled: Глава 1\\n      tutorial.nav: Глава 2\\n\\n    - $root.$init: Том 2\\n      disabled: Глава 1\\n      tutorial.nav: Глава 2\\n\\n    - disabled: Том 3\\n      $root.$init: Глава 1\\n      tutorial.nav: Глава 2\"",
      "nav0.yaml": "\"./$root/$init.yaml\\n- dialog-box: true\\n  $: Привет мир!\\n- jump: chapter1 \\n###########################\\n└───$root\\n    ├───characters.yaml\\n    ├───$init.yaml\\n    ├───chapter1.yaml\\n    ├───chapter2.yaml\\n    ├───chapter3.yaml\\n    └───chapter4.yaml\\n\\n\"",
      "nav1.yaml": "\"./$root/$init.yaml\\n- $: Прыгаем в первую главу книги $root\\n- jump: chapter3 \\n###########################\\n└───$root\\n    ├───characters.yaml\\n    ├───$init.yaml\\n    ├───chapter1.yaml\\n    ├───chapter2.yaml\\n    └───chapter3.yaml\\n\"",
      "nav10.yaml": "\"- menu:\\n    $: Вопрос от имени персонажа. Его может не быть.\\n    chapter1: Прыжок внутри текущей книги / сцены\\n    book2.chapter2: Прыжок в другую книгу /сцену\\n    _mark2: Прыжки по помеченным объектам внутри текущей главы\\n\"",
      "nav11.yaml": "\"- menu:\\n    $: Вопрос от имени персонажа. Его может не быть.\\n    chapter1: Прыжок внутри текущей книги / сцены\\n    book2.chapter2: Прыжок в другую книгу /сцену\\n    _mark2: Прыжки по помеченным объектам внутри текущей главы\\n    disabled_1: Неактивный элемент должен включать в себя часть слова dissabled\\n\"",
      "nav12.yaml": "\"- menu:\\n    $: Вопрос от имени персонажа. Его может не быть.\\n    chapter1: Прыжок внутри текущей книги / сцены\\n    book2.chapter2: Прыжок в другую книгу /сцену\\n    _mark2: Прыжки по помеченным объектам внутри текущей главы\\n    disabled_1: Неактивный элемент должен включать в себя часть слова dissabled\\n    next: Никуда не прыгать, а продолжить выполнение скрипта после меню\"",
      "nav13.yaml": "\"- menu:\\n    $: Вопрос от имени персонажа. Его может не быть.\\n    chapter1: Прыжок внутри текущей книги / сцены\\n    book2.chapter2: Прыжок в другую книгу /сцену\\n    _mark2: Прыжки по помеченным объектам внутри текущей главы\\n    disabled_1: Неактивный элемент должен включать в себя часть слова dissabled\\n    next: Никуда не прыгать, а продолжить выполнение скрипта после меню\\n    onClick:\\n      dialog-box: true\\n      scene: background  \"",
      "nav2.yaml": "\"./$root/chapter3.yaml\\n- $: Прыгаем во вторую книгу\\n- jump: book_2.$init\\n###########################\\n├───$root\\n│   ├───characters.yaml\\n│   ├───$init.yaml\\n│   ├───chapter1.yaml\\n│   ├───chapter2.yaml\\n│   └───chapter3.yaml\\n├───book_2\\n│   ├───$init.yaml\\n│   └───chap1.yaml\"",
      "nav3.yaml": "\"./book_2/$init.yaml\\n- $: Прыгаем в третью книгу в главу test_0\\n- jump: book_3.test_0\\n###########################\\n├───$root\\n│   ├───characters.yaml\\n│   ├───$init.yaml\\n│   ├───chapter1.yaml\\n│   ├───chapter2.yaml\\n│   └───chapter3.yaml\\n├───book_2\\n│   ├───$init.yaml\\n│   └───chap1.yaml\\n└───book_3\\n    ├───$init.yaml\\n    └───test_0.yaml\"",
      "nav4.yaml": "\"./book_3/test_0.yaml\\n- $: Так же можно прыгнуть на конкретную строчку внутри текущей главы\\n- jump: book_3.test_0.3\\n###########################\\n# Отсчёт строк внутри главы начинается от нуля\\n- test 0\\n- test 1\\n- test 2\\n- test 3 # сюда будет сделан прыжок\\n- test 4\\n- test 5\"",
      "nav4_0.yaml": "\"- test 0\\n\"",
      "nav4_1.yaml": "\"- test 0\\n- test 1\\n\"",
      "nav4_2.yaml": "\"- test 0\\n- test 1\\n- test 2\"",
      "nav4_3.yaml": "\"- test 0\\n- test 1\\n- test 2\\n- test 3\\n\"",
      "nav4_4.yaml": "\"- test 0\\n- test 1\\n- test 2\\n- test 3\\n- test 4\"",
      "nav4_5.yaml": "\"- test 0\\n- test 1\\n- test 2\\n- test 3\\n- test 4\\n- test 5\"",
      "nav5.yaml": "\"- ex: Сейчас будет выполнен код. Проследите за его выполнением\\n- scene: earch\\n  next: true\\n- a: Там на неведомых дорожках\\n- jump: _mark1 # jump to _mark1\\n- s: Следы невиданных зверей;\\n  _mark2: true\\n- s: Избушка там на курьих ножках\\n- s: Стоит без окон, без дверей;\\n- s: Там лес и дол видений полны;\\n- jump: nav\\n- a: Там о заре прихлынут волны\\n  _mark1: true  \\n- a: На брег песчаный и пустой,\\n- a: И тридцать витязей прекрасных\\n- jump: _mark2 # jump to _mark2\"",
      "nav6.yaml": "\"- Ночь, улица, фонарь, аптека,\\n- Бессмысленный и тусклый свет.\\n- Живи еще хоть четверть века —\\n- Все будет так. Исхода нет.\\n- dialog-box: false\\n  scene: earch\\n  menu:\\n    planets.luna: Отправиться на Луну\\n    planets.mars: Лучше на Марс \\n    \\n#########\\n/scenes\\n├───$root\\n│   └───$init.yaml\\n├───planets\\n│   ├───luna.yaml \\n│   ├───mars.yaml \\n\"",
      "nav6_1.yaml": "\"# ./src/scenes/planets/luna.yaml\\n- dialog-box: true\\n  lu: Привет человек\\n- lu: Тебе здесь не рады\\n- lu: Возвращайся к своим, на Марс\\n- jump: mars\"",
      "nav6_2.yaml": "\"# ./src/scenes/planets/mars.yaml\\n- dialog-box: true\\n  m: Добро пожаловать домой!\\n- m: Давно не видели человеков\\n\\n- dialog-box: false\\n  menu:\\n    m: С какой целью вы сюда прибыли?\\n    _mark2: Осмотреть достопремичательности\\n    disabled_1: Захватить Марс\\n    disabled_aaa: Пригласить на Землю\\n    marsahod: Забрать марсоход на ремонт\\n    next: Промолчать\\n# next\\n- m: Отказываетесь отвечать?\\n  dialog-box: true\\n- m: Тогда вам здесь не рады, возвращайтесь туда откуда прибыли\\n- jump: $root.$init\\n#####################\\n- _mark2: true\\n  dialog-box: true\\n  $: Хотя тут особо не на что смотреть, пойду лучше домой!\\n- jump: $root.$init\"",
      "nav7.yaml": "\"- menu:\\n    $: Вопрос от имени персонажа. Его может не быть.\\n\"",
      "nav8.yaml": "\"- menu:\\n    $: Вопрос от имени персонажа. Его может не быть.\\n    chapter1: Прыжок внутри текущей книги / сцены\\n\"",
      "nav9.yaml": "\"- menu:\\n    $: Вопрос от имени персонажа. Его может не быть.\\n    chapter1: Прыжок внутри текущей книги / сцены\\n    book2.chapter2: Прыжок в другую книгу / сцену\\n\"",
      "nav_main_menu.yaml": "\"- clear: all\\n  next: true\\n\\n- main-menu:\\n    beginning.$init: Начинающий\\n    experienced.$init: Опытный\\n    disabled_item: Продвинутый\\n    onClick:\\n      dialog-box: true\\n      hands: true\\n      status-bar: true\\n  audio: false\\n  scene: lab\""
    },
    "luna": [
      {
        "scene": "ship",
        "timeout": {
          "timer": 1000,
          "exec": {
            "next": true
          }
        }
      },
      {
        "scene": "luna",
        "timeout": {
          "timer": 1000,
          "exec": {
            "next": true
          }
        }
      },
      {
        "dialog-box": true,
        "lu": "Привет человек",
        "slide": "lunyanin",
        "scene": false
      },
      {
        "lu": "Тебе здесь не рады"
      },
      {
        "lu": "Отправляйся лучше на Марс. Там более рудушно принимают гостей."
      },
      {
        "jump": "mars"
      }
    ],
    "mars": [
      {
        "clear": "all",
        "next": true
      },
      {
        "scene": "ship",
        "timeout": {
          "timer": 1000,
          "exec": {
            "next": true
          }
        }
      },
      {
        "$": "Мы подлетаем!!!",
        "dialog-box": true
      },
      {
        "dialog-box": false,
        "scene": "mars",
        "timeout": {
          "timer": 1000,
          "exec": {
            "next": true
          }
        }
      },
      {
        "dialog-box": true,
        "m": "Добро пожаловать!",
        "scene": false,
        "slide": "marsianin"
      },
      {
        "m": "Давно не видели человеков"
      },
      {
        "dialog-box": false,
        "slide": false,
        "scene": "mars",
        "term": false,
        "menu": {
          "m": "С какой целью вы сюда прибыли?",
          "_mark2": "Осмотреть достопремичательности",
          "disabled_1": "Захватить Марс",
          "disabled_aaa": "Пригласить на Землю",
          "tutorial.nav": "Промолчать и по тихому свалить домой",
          "next": "Промолчать"
        }
      },
      {
        "m": "Отказываетесь отвечать?",
        "dialog-box": true
      },
      {
        "m": "Тогда вам здесь не рады, возвращайтесь туда откуда прибыли"
      },
      {
        "jump": "tutorial.nav"
      },
      {
        "_mark2": true,
        "slide": "mars_delat_nechego",
        "dialog-box": true,
        "$": "Хотя тут особо не на что смотреть, пойду лучше домой!"
      },
      {
        "jump": "tutorial.nav"
      }
    ]
  },
  "plugins": {
    "assets": [],
    "$init": [
      {
        "clear": "all",
        "next": true
      },
      {
        "scene": "earch",
        "menu": {
          "$root.$init": ". .",
          "jump": "jump - Прыжок между сценами и метками",
          "$next": "next - Переход на следующий объект скрипта",
          "timeout": "timeout - Вызывает другие плагины по истечению времени",
          "dialog-box": "dialog-box - Диалоговое окно",
          "scene": "scene - Отоброжение заднего фона внутри экрана",
          "menu": "menu - Внутриигровое меню",
          "clear": "clear - Скрывает все компоненты и отключает аудио",
          "audio": "audio - Воспроизведение аудио",
          "center-left-right": "center, left, right - Отображает персонажей на экране",
          "slide": "slide - Отображает изображение по центру экрана",
          "term": "term - Выводит код с подсведкой синтаксиса",
          "hands": "hands - В диалоговом окне два слота (руки)",
          "screen": "screen -\tПереключение экранов",
          "embed": "embed - Подключение сторонних ресурсов через iFrame",
          "html": "html - Вывод на экран кусков html кода",
          "content": "content",
          "animate": "animate - Добавление анимации к элементам",
          "disabled__qa": "qa - баллы",
          "voice": "voice",
          "status-bar": "status-bar",
          "discord-log": "discord-log",
          "onClick": {
            "dialog-box": true
          }
        }
      }
    ],
    "$next": [
      {
        "$": "Выполняет текущий объект контекста и перескакивает на следующий объект скрипта не дожидаясь действий пользователя"
      },
      {
        "ex": "Сечас будет выполнен код",
        "term": "next.yaml"
      },
      "Первое сообщение, которое выведится",
      {
        "next": true
      },
      {
        "next": true
      },
      {
        "next": true
      },
      {
        "next": true
      },
      {
        "next": true
      },
      {
        "next": true
      },
      {
        "next": true
      },
      {
        "next": true
      },
      {
        "next": true
      },
      {
        "next": true
      },
      "Второе сообщение которое выведится",
      {
        "jump": "$init"
      }
    ],
    "animate": [
      "animate",
      {
        "jump": "$init"
      }
    ],
    "audio": [
      {
        "$": "Воспроизводит звук",
        "term": "audio.yaml"
      },
      {
        "jump": "$init"
      }
    ],
    "center-left-right": [
      {
        "$": "Для вывода изображений персонажей используются плагины center left right",
        "term": "centerLeftRight.yaml"
      },
      {
        "center": "Alice"
      },
      {
        "left": "Alice",
        "center": false
      },
      {
        "right": "Nora"
      },
      {
        "jump": "plugins.$init"
      },
      {
        "jump": "$init"
      }
    ],
    "clear": [
      {
        "$": "Очищает все компонеты с экрана и отключает аудио",
        "term": "clear.yaml"
      },
      "Файлы подключаемые через iFrame при помощи плагина embed необходимо отключать по их id",
      {
        "jump": "$init"
      }
    ],
    "content": [
      "content",
      {
        "jump": "$init"
      }
    ],
    "data": {
      "audio.yaml": "\"- audio:\\n    name: audio1\\n    action: play\\n    speed: 0.3\\n    volume: 0.01\\n    loop: true\\n\\n- audio: false # stop\\n\\n# Так же можно воспроизвести звук в отдельном аудио канале\\n\\n- sound: audio1\"",
      "centerLeftRight.yaml": "\"- center: Alice\\n- left: Alice\\n  center: false\\n- right: Nora\\n- jump: plugins.$init\"",
      "clear.yaml": "\"- clear: all\\n  next: true\"",
      "dialog-box.yaml": "\"- dialog-box: true # отобразить компонент диалогового окна\\n- dialog-box: false # скрыть компонент диалогового окна\\n- dialog-box: clear # очишает диалоговое окно от реплики и имени персонажа\"",
      "discord-log.yaml": "\"- discord-log: Привет Мир!\\n- discord-log: true\\n- discord-log: false\\n\\n##############################\\nДля работы плагина необходимо прописать путь к чату, куда будут выводиться сообщения\\nЗделать это можно в файле ./src/plugins/discord-log/config.yaml\\nЗаменив параметр webhook , на тот который вы можете получить в настройках чата\"",
      "embed.yaml": "\"# ресурсы необходимо разместить в файле ./src/scenes/$root/embed.yaml\\nyt-salut: <iframe width=\\\"100%\\\" height=\\\"100%\\\" src=\\\"https://www.youtube.com/embed/a_o-P-lIDEA?start=50\\\"></iframe>\\n\\n# вызывается из скрипта\\n- yt-salut: true\\n  slide: false\\n  cloud: false\\n\\n- $: youtube\\n  yt-salut: false\\n  next: true\\n\\n- $: code pend\\n  cp-nexus: true\\n  \\n- $: sketchfab\\n  cp-nexus: false\\n  3d-conni: true\\n\\n- 3d-conni: false\\n  yt-muk: true\\n\\n- yt-muk: false\\n  yt-delp: true\\n\\n- yt-delp: false\\n  dialog-box: clear\\n  jump: $init\"",
      "hands.yaml": "\"- hands: true\\n\\n- hand-left: imageName1\\n- hand-right: imageName2\\n\\n- hands: false\"",
      "html.yaml": "\"\\n# кусочки html необходимо разместить в файле ./src/scenes/$root/html.yaml\\nhtmlChunk: <a class=\\\"qr-code\\\" href=\\\"http://qrcoder.ru\\\" target=\\\"_blank\\\"><img src=\\\"http://qrcoder.ru/code/?http%3A%2F%2Fatlant.mcacademy.ru%3A9000%2F&10&0\\\" width=\\\"370\\\" height=\\\"370\\\" border=\\\"0\\\" title=\\\"QR код\\\"></a>\\nredBox: <div class=\\\"red-box\\\"></div>\\n\\n\\n# вызывается из скрипта\\n- htmlChunk: true\\n  redBox: true\\n\\n\\n- htmlChunk: false\\n  redBox: false\\n\\n# так же можно передать css объект\\n- htmlChunk:\\n    css: \\n      top: 50px\\n      left: 100px\\n\\n# при последующем вызове плагина\\n# указывать стили уже не обязательно\\n# он замомнит, стили ранее указанные\\n- htmlChunk: false\"",
      "jump.yaml": "\"#scene1/part1.yaml\\n- У лукоморья дуб зелёный\\n- Златая цепь на дубе том\\n- И днём и ночью кот учёный\\n- Всё ходит по цепи кругом\\n- jump: part2 # Прыжок в метку part2 внутри этой же сцены\\n\\n#scene1/part2.yaml\\n- Идёт направо — песнь заводит,\\n- Налево — сказку говорит.\\n- jump: scene2.$init # Прыжок в другую сцену\\n\\nМожно делать прыжки на конкретную позицию внутри скрипта scene.label.index Позиция внутри label (метки) отсчитывается с нуля\\n#scene2/$init.yaml\\n\\n- Там чудеса: там леший бродит,\\n- Русалка на ветвях сидит\\n- jump: $root.$init.3\\n\\n\"",
      "main-menu.yaml": "\"- menu:\\n    _mark1: В начало\\n    disabled: Общая концепция\\n    $root.$init: Отправиться в начало\\n    next: Список плагинов\\n\\n\\n- menu:\\n    zim-label: Как подключить zim\\n    label_1_tree__fs: Файловая структура\\n    yaml-scripts: YAML скрипты\\n    plug: Список плагинов\\n    disabled: ---\\n    $root.$init: Вернуться в начало\\n    onClick:\\n      hands: true\\n      dialog-box: true\\n\\n# onClick - execute the code after the jump\\n# \\n# \\n- menu:\\n    zim-label: Как подключить zim\\n    label_1_tree__fs: Файловая структура\\n    yaml-scripts: YAML скрипты\\n    plug: Список плагинов\\n    disabled: ---\\n    $root.$init: Вернуться в начало\\n    onClick:\\n      hands: true\\n      dialog-box: true\\n    css:\\n      transform: unset\\n      left: unset\\n      width: 300px\\n      top: 50px\\n      right: 20px\"",
      "menu.yaml": "\"- menu:\\n    luna: Отправиться на Луну\\n    mars: Лучше на Марс \\n    next: Пожалуй останусь на Земле #Можно внутри можно использовать [ next ]\\n\\n#next\\n- Земля\\n\\n### ### ##\\n- menu:\\n    $: Куда бы мне отправить #Вопрос от автора\\n    luna: Отправиться на Луну\\n    mars: Лучше на Марс \\n### ### ##\\n- menu:\\n    a: Куда бы мне отправить #Вопрос от Алисы\\n    luna: Отправиться на Луну\\n    mars: Лучше на Марс \\n### ### ##\\n- menu:\\n    a: Куда бы мне отправить #Вопрос от Алисы\\n    luna: Отправиться на Луну\\n    disabled: Лучше на Марс #Не активный пункт меню\\n    disabled_23: Еще один заблокированный пункт\\n    next: Дальше\\n#Что бы заблокировать пункт меню используется ключевое слово [ disable ]\\n#Но так как заблокировавнных пунктов может быть несколько, а ключи внутри объекта\\n#не могут повторяться, то к ключевому слову пожно прибавить какой-нибудь префикс disabled_24\\n\\n- $: Пример с маркировкой\\n  _mark1: true\\n\\n- menu:\\n    luna: Отправиться на Луну\\n    mars: Лучше на Марс \\n    _mark1: В начало\\n    onClick:\\n      dialog-box: true\\n      scene: background\\n\\n# onClick - Ключевое слово. Принимает объект для выполнения this.exec({ctx})\\n- menu:\\n    _mark1: В начало\\n    disabled: Общая концепция\\n    $root.$init: Отправиться в начало\\n    next: Список плагинов\\n\\n\\n- menu:\\n    zim-label: Как подключить zim\\n    label_1_tree__fs: Файловая структура\\n    yaml-scripts: YAML скрипты\\n    plug: Список плагинов\\n    disabled: ---\\n    $root.$init: Вернуться в начало\\n    onClick:\\n      hands: true\\n      dialog-box: true\\n\\n# onClick - execute the code after the jump\\n# \\n# \\n- menu:\\n    zim-label: Как подключить zim\\n    label_1_tree__fs: Файловая структура\\n    yaml-scripts: YAML скрипты\\n    plug: Список плагинов\\n    disabled: ---\\n    $root.$init: Вернуться в начало\\n    onClick:\\n      hands: true\\n      dialog-box: true\\n    css:\\n      transform: unset\\n      left: unset\\n      width: 300px\\n      top: 50px\\n      right: 20px\"",
      "next.yaml": "\"- Первое сообщение, которое выведится\\n- next: true\\n- next: true\\n- next: true\\n- next: true\\n- next: true\\n- next: true\\n- next: true\\n- next: true\\n- next: true\\n- next: true\\n- Второе сообщение которое выведится\"",
      "qa.yaml": "\"\"",
      "scene_p.yaml": "\"- scene: imagename\\n\\n- scene:\\n    url: http://app1234.xyz/assets/imagename.jpg\\n    \\n\\n- scene: false\"",
      "slide.yaml": "\"- slide: Screenshot_35\\n- slide: false\\n\\n- slide:\\n    name: Screenshot_35\\n    css:\\n      top: 320px\\n      border: 15px dashed orange\\n\\n# загрузка изображения со стороннего сайта     \\n- slide:\\n    url: http://app1234.xyz/assets/ship.png\\n    css:\\n      width: 200px\\n      height: 300px\"",
      "status-bar.yaml": "\"- status-bar: true\\n- $: 00000\\n- $: 11111\\n- status-bar: false\"",
      "target.yaml": "\"- a: Там на неведомых дорожках\\n- target: _mark1 # jump to _mark1\\n- s: Следы невиданных зверей;\\n  _mark2: true\\n- s: Избушка там на курьих ножках\\n- s: Стоит без окон, без дверей;\\n- s: Там лес и дол видений полны;\\n- jump: $init\\n- a: Там о заре прихлынут волны\\n  _mark1: true  \\n- a: На брег песчаный и пустой,\\n- a: И тридцать витязей прекрасных\\n- target: _mark2 # jump to _mark2\"",
      "term.yaml": "\"- term: lesson_1.py #planeText[extname]\\n\\n- term: lesson_1.lua  \\n\\n- term: imageName # выводит изображение в компоненте терминала\\n\\n- term: false # скрыть терминал\\n\\n- term: clear # очистить терминал\"",
      "term_1.yaml": "\"/scenes\\n├───$root\\n│   ├───assets\\n│   ├───data\\n│   │   ├───lesson_1.lua\\n│   │   └───lesson_1.py\"",
      "timeout.yaml": "\"- timeout:\\n    exec: \\n      jump: $root.$init\\n    timer: 1000\""
    },
    "dialog-box": [
      {
        "$": "Скрывает и показывает диалоговое окно",
        "term": "dialog-box.yaml"
      },
      {
        "jump": "$init"
      }
    ],
    "discord-log": [
      {
        "$": "discord-log - предназначен для отправки сообщения в дискорд через webhook",
        "term": "discord-log.yaml"
      },
      {
        "$": "В конрне этого плагина лежит файл config.yaml В нём необходимо указать webhook"
      },
      {
        "jump": "$init"
      }
    ],
    "embed": [
      {
        "$": "embed",
        "term": "embed.yaml"
      },
      {
        "jump": "$init"
      }
    ],
    "hands": [
      {
        "$": "Выводит в диалоговое окно дополнительный блок со слотами под предметы",
        "term": "hands.yaml"
      },
      {
        "jump": "$init"
      }
    ],
    "html": [
      {
        "$": "html chunks",
        "term": "html.yaml"
      },
      {
        "jump": "$init"
      }
    ],
    "jump": [
      {
        "$": "Совершает прыжки между сценами ( scene ), и между метками ( label ) внутри сцен",
        "term": "jump.yaml"
      },
      {
        "jump": "$init"
      }
    ],
    "menu": [
      {
        "$": "внтуриигрового меню",
        "term": "menu.yaml"
      },
      {
        "jump": "$init"
      }
    ],
    "qa": [
      {
        "$": "баллы",
        "term": "qa.yaml"
      },
      {
        "jump": "$init"
      }
    ],
    "scene": [
      {
        "$": "Отображает изображение на заднем фоне экрана #stream",
        "term": "scene_p.yaml"
      },
      {
        "jump": "$init"
      }
    ],
    "screen": [
      "screen",
      {
        "jump": "$init"
      }
    ],
    "slide": [
      {
        "$": "slide",
        "term": "slide.yaml"
      },
      {
        "jump": "$init"
      }
    ],
    "status-bar": [
      {
        "$": "Предназначен для вывода статуса игрока. Выполнил ли он задание или ему требуются дополнительные разъяснения",
        "term": "status-bar.yaml"
      },
      {
        "status-bar": true
      },
      {
        "$": 0
      },
      {
        "$": 11111
      },
      {
        "status-bar": false
      },
      {
        "jump": "$init"
      }
    ],
    "term": [
      {
        "$": "Компонент для вывода кода с подсведкой синтаксиса",
        "term": "term.yaml"
      },
      {
        "$": "Файлы с текстом необходимо ложить в папку data  в любой сцене",
        "term": "term_1.yaml"
      },
      {
        "jump": "$init"
      }
    ],
    "timeout": [
      {
        "$": "Выполняет другие плагины по истечению таймера (в миллисекундах)",
        "term": "timeout.yaml"
      },
      {
        "jump": "$init"
      }
    ],
    "voice": [
      "voice",
      {
        "jump": "$init"
      }
    ]
  },
  "terminal": {
    "assets": [],
    "$init": [
      {
        "$": "Терминал - это интерфейс, в котором вы можете писать названия программ и они будут запускаться.",
        "slide": "term"
      },
      {
        "$": "Если ввести команду <i style=\"color: red\">ls</i> <i style=\"color: gold\"> -1a</i>",
        "term": "t_0.yaml",
        "slide": false
      },
      {
        "$": "То мы увидим примерно такую структуру. Это содержимое папки текущего пользователя.",
        "term": "t_0_1.yaml"
      },
      "Символ  <i style=\"color: red\">-</i> ( тире ) указывает на то какие опции ( параметры ) передать в эту программу",
      {
        "$": "Пока нам тут делать нечего, поэтому перейдем к самому верхнему уровню каталогов нашей системы. Написав и выполнив эти две команды.",
        "term": "t_1_1.yaml"
      },
      {
        "$": "Программа <i style=\"color: gold\">cd</i> отвечает за переходы между папками, а <i style=\"color: orange\">ls</i> за отображение содержимого",
        "term": "t_1.yaml"
      },
      {
        "$": "Перед вами должна предстать примерно такая картина. Это что то вроде корня жёсткого диска.",
        "term": "t_1_2.yaml"
      },
      {
        "$": "Давате сделаем папку для своих проектов. И перейдём в неё.",
        "term": "t_2.yaml"
      },
      {
        "$": "Для этого мы вополняем команду <i style=\"color: red\">mkdir</i> ставим пробел и указываем название папки <i style=\"color: gold\">project</i>"
      },
      {
        "$": "Файл можно создать командой <i style=\"color: red\">touch</i> ставим пробел и указываем название файла <i style=\"color: gold\">fileName.txt</i>",
        "term": "t_3.yaml"
      },
      {
        "$": "В одном окне работать не слишком удобно поэтому давайте запустим менежер рабочего пространства <i style=\"color: gold\">tmux</i>",
        "term": "tmux_0.yaml"
      },
      "Выполните все команды по очереди и экран разделится на несколько частей",
      {
        "slide": "tmux",
        "$": "Должно получить примерно так",
        "term": false
      },
      {
        "$": "Горячиче клавиши для роботы с tmux",
        "term": "tmux_1.yaml",
        "slide": false
      },
      {
        "jump": "$root.$init"
      }
    ],
    "data": {
      "tmux_0.yaml": "\"Очистить терминал\\n# clear\\nЗапустить tmux\\n# tmux\\nРазделяем экран на две части по горизонтали\\n# tmux split-window -h \\nРазделяем одну половинку ещё и по вертикали\\n# tmux split-window -v \\nЗапускаем  Midnight Commander для удобной навигации\\n# mc\\n\"",
      "tmux_1.yaml": "\"Горячие клавиши для работы с программой tmux\\nCTRL + a   Префикс (с него начинаются команды)\\n\\nCtrl+a \\\" — Разделить текущую панель по горизонтали.\\nCtrl+a % — Разделить текущую панель по вертикали.\\nCtrl+a стрелиНаКлавиатуре — переключение между панелями\\nCtrl+a x — Закрыть панель\\nHold Ctrl+a, don’t release it and hold one of the arrow keys — resize pane.\\nCtrl+a c — Создать новое окно\\nCtrl+a w — Список всех окон\\nCtrl+a n — Перейти на следующее окно\\nCtrl+a p — Перейти на предыдущее окно\"",
      "t_0.yaml": "\"Показать список файлов и папок в текущем каталоге\\n# ls\\nСкрытые файлы тоже показывать\\n# ls -1a\\n\"",
      "t_0_1.yaml": "\".                            \\n..                           \\n.bash_history                \\n.bashrc                      \\n.cache                       \\n.config                      \\n.gnupg                       \\n.local                       \\nlsblk_raw                    \\n.npm                         \\n.profile                     \\nsnap                         \"",
      "t_1.yaml": "\"Перейти в корневой каталог\\n# cd /\\n\\nПерейти в каталог пользователся\\n# cd ~\\n\\nТекущий каталог\\n# cd .\\n# cd ./\\n\\nПерейти из этой папки на уровень вложенности выше\\n# cd ..\\n# cd ../../../home\"",
      "t_1_1.yaml": "\"# cd /\\n# ls -1a\"",
      "t_1_2.yaml": "\"bin       \\nboot      \\ndev       \\netc       \\nhome      \\nlib       \\nlib64     \\nmedia     \\nmnt       \\nopt       \\nroot      \\nrun       \\nsys       \\ntmp       \\nusr       \\nvar       \"",
      "t_2.yaml": "\"# mkdir projects\\n# cd projects\\n\\n\\n\\n\\n\\n\\n\\n______________________________\\nСоздать папку\\n# mkdir directoryName\\nУдалить папку\\n# rm -rf directoryName\\n\\n\"",
      "t_3.yaml": "\"# touch fileName.txt\\n\\nТак же можно создать файл и передать в него какой то текст\\n\\n# echo text1 text2>file.txt\\n\\nОтобразить содержимое файла на экране\\n# cat file.txt\"",
      "t_9999.yaml": "\"Несколько дополнительных команд\\n\\nПрервать выполнение программы\\nCtrl + C\\nПерезагрузить компьютер\\n# reboot\""
    }
  },
  "tutorial": {
    "assets": [],
    "audio": [
      {
        "$": "Что бы воспроизвести аудио необходимо воспользоваться плагинов audio",
        "term": "audio_0.yaml"
      },
      {
        "ex": "Сейчас будет воспроизведен код"
      },
      {
        "sound": "pianino",
        "m": "Плагин можно использовать для воспроизведения звуков"
      },
      {
        "a": ". . . . . . . . . . . ."
      },
      {
        "s": ". . . . . . . . . . . . . . . . . . . . ."
      },
      {
        "ex": "Проследите за выполнением кода",
        "term": "audio_1.yaml"
      },
      {
        "lu": "Воспроизведение аудио",
        "audio": {
          "name": "rozario_agro",
          "action": "play",
          "loop": true,
          "volume": 0.5,
          "speed": 0.5
        }
      },
      {
        "m": ". . . . . . . . . . . ."
      },
      {
        "s": ". . . . . . . . . . . . . . . . . . . . ."
      },
      {
        "audio": false,
        "next": true
      },
      {
        "$": "Включить плагин hands",
        "hands": true
      },
      {
        "$": "Воспроизвести речь",
        "$voice": "pianino"
      },
      ". . . .",
      ". . . . . . . . . . . .",
      ". . . . . . . . . . . . . . . . . . . . .",
      {
        "jump": "$root.$init"
      }
    ],
    "data": {
      "audio_0.yaml": "\"# Воспроизвести звук\\n- ex: Сейчас будет воспроизведен код\\n- sound: pianino\\n  m: Плагин можно использовать для воспроизведения звуков\\n- a: . . . . . . . . . . . .\\n- s: . . . . . . . . . . . . . . . . . . . . .\"",
      "audio_1.yaml": "\"# без параметров в отдельной аудио дорожке от sound\\n- ex: Проследите за выполнением кода\\n- lu: Воспроизведение аудио\\n  audio:\\n    name: rozario_agro\\n    action: play\\n    loop: true  # не обязательный параметр default = false\\n    volume: 0.3 # не обязательный параметр default = 1\\n    speed: 0.5  # не обязательный параметр default = 1\\n- m: . . . . . . . . . . . .\\n- s: . . . . . . . . . . . . . . . . . . . . .\\n- audio: false\\n  next: true\"",
      "audio_2.yaml": "\"- hands: true \\n  $: Отображает панель с кнопкой для воспроизведения голоса\\n\\n- $: Привет мир 0\\n  $voice: soundName0\\n- $: Привет мир 1\\n  $voice: soundName1\\n  - $: Привет мир 2\\n  $voice: soundName2\\n  \\n# $voice - ключевое слово не вызывается сразу.\\n# а воспроизводится когда пользователь жмет на значёк [ play] \\n# в диалоговом окне.\\n# что бы отобразить этот значёк необходимо сперва влюкчить плагин hands\"",
      "dta_0.yaml": "\"\\n- clear-data: true # обнуляет данные текущего пользователя\\n- clear-data-all: true # удалит переменные всех пользователей\\n\\n# ложим данные в хранилище $vnjs.current.data\\n- set-data:\\n    age: меньше 12\\n    gender: M\\n\\n\\n# получаем данные данные в хранилище $vnjs.current.data\\n- switch:\\n    age===меньше12:\\n      jump: $root.$init\\n    age===больше12:\\n      $: Возраст больше 12 лет\\n    age===17:\\n      target: _17лет\\n\\n\\n- status-bar: true\\n  menu:\\n    _mark1: Прыгаем по метке и там присваиваем данные\\n    _mark2: Ещё один пукт меню\\n\\n\\n- _mark1: true\\n  $: Записываю данные\\n  set-data:\\n      age: меньше12\\n      name: Сергей\\n\\n\\n# получаем данные данные в хранилище $vnjs.current.data\\n- switch:\\n    age===меньше12:\\n      $: Меньше 12\\n    age===больше12:\\n      $: Возраст больше 12 лет\\n\\n- dialog-box: false\\n  switch:\\n    name===Сергей: # приимает объект для выполнения\\n      $: Показываем диалоговое окно\\n      dialog-box: true\\n      scene: lake\\n      sound: pianino\"",
      "img_0.yaml": "\"/scenes\\n└───$root\\n    ├───assets\\n    ├───$init.yaml\\n    ├───package.yaml\\n    └───characters.yaml\"",
      "img_1.yaml": "\"/$root\\n├───assets\\n│   ├───background_1024x768_lab.jpg\\n│   ├───background_1024x768_lake.jpeg\\n│   ├───background_1024x768_library.webp\\n│   ├───character_260x450_alice.png\\n│   ├───character_260x450_nora.png\\n│   ├───slide_XXXxXXX_0.png\\n│   └───piano.mp3\\n├───$init.yaml\\n├───package.yaml\\n└───characters.yaml\\n\"",
      "img_3.yaml": "\"- scene: background_1024x768_lake\\n  s: На задной фон ставим изображение с озером\\n- m: А теперь изображение лаборатории\\n  scene: background_1024x768_lab\\n- a: Теперь ты можешь увидеть как я выгляжу\\n  right: character_260x450_alice\\n- a: А теперь я появлилась тут\\n  left: character_260x450_alice\\n  right: false\\n  scene: false\\n- a: А это моя подруга Нора\\n  center: character_260x450_nora\\n- $: Таким вот образом отображается произвольное изображение по центру\\n  slide: slide_XXXxXXX_0\\n  center: false\\n  left: false\\n- jump: $root.$init\\n  slide: false\"",
      "img_4.yaml": "\"- scene:\\n    url: http://site.ru/image-name.jpg\\n- slide:\\n    url: http://site.ru/image-name2.jpg\\n\"",
      "setup_mv.yaml": "\"# mv 9000 9001\"",
      "zim_0.js": "\"// ./src/plugins.js\\n// Подключаем плагин к движку. В конце строк с ключевым словом import \\n// добавьте путь к своему новому плагину\\nimport zimIntroCopy from './plugins/zim-intro-copy/index.js'\\n\\n// И чуть ниже регестрируем плагин. Что бы движок узнал о нём\\nthis.use( zimIntroCopy )\"",
      "zim_0.yaml": "\"/src/plugins\\n├───zim-intro\\n│   ├───index.js\\n│   └───zim.js\\n\"",
      "zim_1.js": "\"/* ./src/plugins/zim-ui/zim.js  */\\nexport const event = \\\"zim-entry-copy\\\" // Название события по которому будет вызываться\\n\\nexport function init (){\\n  //Необходимо что бы frame был доступен в глобальном пространстве имён\\n  //для этого мы создадим свойсво window.frame и определим в него экземпляр класса Frame\\n  //обратите внимание что id=zim \\n  window.frame = new Frame('zim', 1024, 768, light, dark);\\n\\n}\"",
      "zim_1.yaml": "\"\\n- zim-entry-copy: true\\n\\n- zim-entry-copy: false\""
    },
    "define-chars": [
      {
        "$": "Так же нам необходимо зарегестрировать персонажей от чьего имени будет вестись повествование"
      },
      {
        "$": "Регистрация персонажей осуществляется в файле <i style=\"color: red\">./$root/characters.yaml</i>",
        "term": "chars1.yaml"
      },
      {
        "$": "Сперва необходимо дать индификатор персонажу. При помощи которого мы будем понимать, кто сказал фразу",
        "term": "chars2.yaml"
      },
      "Индификатор <i style=\"color: orange\">$</i> зарезервирован за репликами от имени автора",
      "id персонажа может содержать сколько угодно символов. Но длинные id не слишком удобно будет часто печатать",
      {
        "$": "Имя персонажа будет выводиться над репликой персонажа, что бы было понятно от чьего лица ведется повестование",
        "term": "chars3.yaml"
      },
      {
        "$": "Цвет имени персонажа. Рекомендую задавать в формате <i style=\"color: orange\">hex</i>",
        "term": "chars4.yaml"
      },
      {
        "$": "Так как в <i style=\"color: red\">YAML</i> символ <i style=\"color: darkcyan;\">#</i> используется для комментирования кода, то строку с ним, как и с другими спец. символами нужно экранировать ковычками",
        "term": "chars5.yaml"
      },
      {
        "a": "Реплика от имени Алисы",
        "term": "chars6.yaml"
      },
      {
        "s": "Реплика от имени Сергея. Так же можно использовать цвета в формате  <i style=\"color: magenta\">rgb</i>",
        "term": "chars7.yaml"
      },
      {
        "ex": "Так же можно использовать стандарные имена цветов",
        "term": "chars7_1.yaml"
      },
      {
        "term": "chars8.yaml",
        "ex": "Сейчас будет выполнен код. Проследите за ходом его выполнения"
      },
      {
        "a": "Там на неведомых дорожках"
      },
      {
        "s": "Следы невиданных зверей;"
      },
      {
        "a": "Избушка там на курьих ножках"
      },
      "Стоит без окон, без дверей;",
      "Строка без индификатора произносится от имени автора",
      {
        "s": "Там лес и дол видений полны;"
      },
      {
        "$": "Там о заре прихлынут волны"
      },
      {
        "ex": "Индификатор можнет содержать больше чем один символ"
      },
      {
        "$": "Символ $ зарезервирован за автором в файле characters.yaml"
      },
      {
        "a": "На брег песчаный и пустой,"
      },
      "И тридцать витязей прекрасных",
      "Чредой из вод выходят ясных,",
      {
        "s": "И с ними дядька их морской;"
      },
      {
        "jump": "$root.$init"
      }
    ],
    "dialog": [
      {
        "ex": "Сейчас будет выполнен код. Проследите за его выполнением"
      },
      {
        "dialog-box": false,
        "timeout": {
          "timer": 1000,
          "exec": {
            "dialog-box": true,
            "next": true
          }
        }
      },
      {
        "$": "Что бы отображались реплики, необходимо сначала отобразить диалоговое окно",
        "term": "reply1.yaml"
      },
      {
        "a": "Там королевич мимоходом"
      },
      {
        "a": "Пленяет грозного царя;"
      },
      {
        "s": "Там в облаках перед народом"
      },
      "Через леса, через моря",
      {
        "s": "Колдун несёт богатыря;"
      },
      "В темнице там царевна тужит,",
      {
        "$": "А бурый волк ей верно служит;"
      },
      {
        "a": "В некоторых случаях требуется скрыть диалоговое окно.",
        "dialog-box": false,
        "timeout": {
          "timer": 1000,
          "exec": {
            "dialog-box": true
          }
        }
      },
      {
        "ex": "Сейчас будет выполнен код. Проследите за его выполнением"
      },
      {
        "$": "Что бы экранировать специальные символы !! %% && '' :: ## заключите строку в ковычки",
        "term": "reply2.yaml"
      },
      {
        "$": "Реплика внутри объекта"
      },
      {
        "a": "Реплика от другого персонажа"
      },
      {
        "$": "Использование html тегов внутри  <i style=\"color: #d405f0\">реплики</i>"
      },
      "1111111",
      "1111test",
      "test 1111",
      {
        "$": 1111111
      },
      {
        "jump": "$root.$init"
      }
    ],
    "dta": [
      {
        "$": "set-data",
        "term": "dta_0.yaml"
      },
      {
        "jump": "$root.$init"
      }
    ],
    "embed": [
      {
        "$": "За подключения сторонних ресурсов отвечает плагин <i class='green'>embed</i>",
        "term": "embed.yaml"
      },
      {
        "$": "Так же можно подгружать дополнительные сцены со сторонних серверов, посредством плагина load-scene",
        "key1": true,
        "term": false
      },
      {
        "$": "Выключать внешние ресурсы необходимо параметром <i style=\"color: skyblue\">false</i>",
        "key1": false,
        "term": "embed2.yaml"
      },
      {
        "term": false
      },
      {
        "$": "Можете любой сайте падключить через iframe просто укажие его в src"
      },
      {
        "jump": "$root.$init"
      }
    ],
    "entry": [
      {
        "$": "Первый делом необходимо зайти на наш сервер",
        "slide": "server_name"
      },
      {
        "$": "Далее постарайтесь найти компьтер внутри MineCraft. Выгладит он примерно так",
        "slide": "pc"
      },
      "Компьютер состоит из двух частей. Системный блок  и монитор.",
      {
        "$": "Откройте интерфейс  системного блока и запустите компьютер нажав на красную кнопку.",
        "slide": "iron"
      },
      {
        "$": "Закройте окно интерфейса и загляните в монитор. Там должен происходить процесс загрузки операционной системы <i style=\"color: red\">Ubuntu</i>, которая построена на ядре <i style=\"color: cyan\">Linux<i>",
        "slide": "term"
      },
      "Следует отметить, что операционная система установленная на жёсткий диск не имеет графического интерфейса.",
      "Поэтому взаимодействовать с ней мы будет через <i style=\"color: orange\">terminal</i>",
      {
        "$": "Если система загрузилась, то вам будет предложено в вести  имя пользователя и пароль."
      },
      {
        "$": "Если логин и пароль верны, то мы попадём в папку ( каталог ) текущего пользователя"
      },
      {
        "jump": "$root.$init"
      }
    ],
    "images": [
      {
        "a": "Прежде чем выводить изображения внутри новелы, сперва их надо добавить в проект",
        "term": "img_0.yaml"
      },
      {
        "a": "Для этого предусмотрена папка <i style=\"color: orange\">assets</i>, которую необходимо разместить внутри сцены"
      },
      {
        "a": "Туда можно добавлять как изображения, так и аудио материалы",
        "term": "img_1.yaml"
      },
      {
        "a": "Медиа ресурсы из этой директории будут автоматически зарегестрированы и станут доступны внутри новелы."
      },
      {
        "a": "Но для этого надо пересобрать сцены, путем сохранения изменений yaml файлов"
      },
      {
        "a": "Поддерживаемый тип файлов: <i style=\"color: red\">png</i> <i style=\"color: lightgreen\">jpg / jpeg</i> <i style=\"color: orange\">webp</i> <i style=\"color: orange\">gif</i>  <i style=\"color: yellow\">mp3</i> <i style=\"color: orange\">ogg</i> <i style=\"color: magenta\">waw</i>"
      },
      {
        "a": "Обратите внимание. Имена медиа файлов должны быть <i style=\"color: #16fa48\">уникальными и не содержать пробелов и спец. сиволов</i>"
      },
      {
        "a": "Важно! Что бы вызвать изображение добавленное в папку assets внутри скрипта. Нам понадобится его <i style=\"color: red\">id</i> "
      },
      {
        "a": " Индификатором изображения является его название без расширения <span style=\"font-family: Consolas; color: magenta;\">character__260x450_alice  <s style=\"color: ghostwhite\">.png</s></span>"
      },
      {
        "ex": "Сейчас будет выполнен этот код. Проследите за ходом его выполния.",
        "term": "img_3.yaml"
      },
      {
        "scene": "lake",
        "term": false,
        "s": "На задной фон ставим изображение с озером"
      },
      {
        "m": "А теперь изображение лаборатории",
        "scene": "lab"
      },
      {
        "a": "Теперь ты можешь увидеть как я выгляжу",
        "right": "Alice"
      },
      {
        "a": "А теперь я появлилась тут",
        "left": "Alice",
        "right": false,
        "scene": false
      },
      {
        "a": "А это моя подруга Нора",
        "center": "Nora"
      },
      {
        "$": "Таким вот образом отображается произвольное изображение по центру",
        "slide": "iron",
        "center": false,
        "left": false
      },
      {
        "$": "Так же можно подключать изображения через <i style=\"color: orange\">url</i>",
        "term": "img_4.yaml",
        "slide": false
      },
      {
        "$": "Но подключение по url не работает для center | left | right"
      },
      {
        "jump": "$root.$init"
      },
      {
        "$": "Так же необходимо поведать о том как выводятся изображения персонажей",
        "right": "Alice",
        "term": false
      },
      {
        "$": "Какие то фризы",
        "scene": "library"
      },
      {
        "$": "Скрывает изображение",
        "right": false,
        "left": "Nora"
      },
      {
        "scene": false,
        "left": false,
        "term": "lab"
      },
      {
        "term": false,
        "slide": "Nora"
      },
      {
        "jump": "$root.$init"
      }
    ],
    "nav": [
      {
        "clear": "all",
        "next": true
      },
      {
        "scene": "lab",
        "menu": {
          "$root.$init": ". .",
          "nav_jump": "jump",
          "nav_menu": "menu",
          "nav_main-menu": "main-menu",
          "nav_content": "content",
          "onClick": {
            "dialog-box": true
          }
        }
      }
    ],
    "nav_content": [
      {
        "$": "Плагин content поможет, если вам потребудется создавать вложенные струкуры для навигации",
        "term": "content_1.yaml"
      },
      "Правда уровень вложености всего один.",
      "Если для этого плагина можно создать отдельную главу в $root и дать ей название content.yaml",
      {
        "$": "То можно будет воспользоваться кнопкой для его вызова. Которая находится  в правом нижнем углу",
        "hands": true
      },
      {
        "term": false,
        "content": [
          {
            "$root.$init": "Том 1",
            "disabled": "Глава 1",
            "tutorial.nav": "Глава 2"
          },
          {
            "$root.$init": "Том 2",
            "disabled": "Глава 1",
            "tutorial.nav": "Глава 2"
          },
          {
            "disabled": "Том 3",
            "$root.$init": "Глава 1",
            "tutorial.nav": "Глава 2"
          }
        ]
      }
    ],
    "nav_jump": [
      {
        "$": "Навигация между скриптами осуществляется посредством плагина <i style=\"color: magenta;\">jump</i>",
        "term": "nav0.yaml"
      },
      {
        "$": "Для того, что бы перейти на другую главу вашей книги, необходимо указывать плагину <i style=\"color: red;\">jump</i> куда хотим отправиться. ",
        "term": "nav1.yaml"
      },
      {
        "$": "Внутри книги <i style=\"color: gray;\">( scene )</i> перемещение между главами осуществляется посредством указания названия главы <i style=\"color: gray;\">( label )</i> <i style=\"color: magenta;\">без расширения    <s style=\"color: red; font-family: Consolas;\">.yaml</s></i> ",
        "term": "nav2.yaml"
      },
      {
        "$": "Для осуществелия прыжков между книгами необходимо указывать в какую книгу хотим прыгнуть, а так же конкретную главу внутри этой книги. Формат записи такой <span style=\"font-family: Consolas;\"> <i style=\"color: red;\">sceneName</i><b style=\"color:lightgreen;\">.</b><i style=\"color: orange;\">labelName</i>",
        "term": "nav3.yaml"
      },
      {
        "$": "Прыжки внутри конкретной метки <span style=\"font-family: Consolas;\"> <i style=\"color: red;\">sceneName</i><b style=\"color:lightgreen;\">.</b><i style=\"color: orange;\">labelName</i><b style=\"color: lightgreen;\">.</b><i style=\"color: magenta;\">index</i></span> можно осуществлять, если указать позицию / индекс внутри скрипта. Индекс начинается с <i style=\"color: darkcyanl\">нуля</i>",
        "term": "nav4.yaml"
      },
      {
        "$": "Можно пометить какую-нибудь строку свойством начинающимся со знака <i style=\"color: magenta;\">_</i> нижего подчёркивания  <i style=\"color: darkcyan;\">_example1: true</i>",
        "term": "nav5.yaml"
      },
      {
        "$": "Тогда можно будет совершить прыжок на эту отметку. Но в пределах текущей главы. jump: _example1"
      },
      {
        "ex": "Сейчас будет выполнен код. Проследите за его выполнением"
      },
      {
        "scene": "earch",
        "next": true
      },
      {
        "a": "Там на неведомых дорожках"
      },
      {
        "jump": "_mark1"
      },
      {
        "s": "Следы невиданных зверей;",
        "_mark2": true
      },
      {
        "s": "Избушка там на курьих ножках"
      },
      {
        "s": "Стоит без окон, без дверей;"
      },
      {
        "s": "Там лес и дол видений полны;"
      },
      {
        "jump": "nav"
      },
      {
        "a": "Там о заре прихлынут волны",
        "_mark1": true
      },
      {
        "a": "На брег песчаный и пустой,"
      },
      {
        "a": "И тридцать витязей прекрасных"
      },
      {
        "jump": "_mark2"
      }
    ],
    "nav_main-menu": [
      {
        "term": "nav_main_menu.yaml",
        "$": "Главное меню делается так же как и обычное меню",
        "dialog-box": true
      },
      {
        "$": "только стили у него другие и ключевое слово по которому оно вызывается"
      },
      {
        "scene": "earch",
        "term": false,
        "dialog-box": false,
        "main-menu": {
          "planets.luna": "Луна",
          "planets.mars": "Марс",
          "css": {
            "transform": "unset",
            "left": "unset",
            "right": "50px",
            "top": "50px",
            "background": "darkcyan"
          }
        }
      }
    ],
    "nav_menu": [
      {
        "$": "Внутриигровое меню вызывается по ключевому слову <i style=\"color: magenta;\">menu</i>",
        "term": "nav7.yaml"
      },
      {
        "$": "Если прыжок осуществляется внути текущей книги / сцены , то не обязательно писать название этой сцены.",
        "term": "nav8.yaml"
      },
      {
        "$": "Если же переместиться нужно в другую книгу. То нужно указать название другой книги и главу куда хотим прыгнуть",
        "term": "nav9.yaml"
      },
      {
        "$": "Плагин <i style=\"color: magenta;\">menu</i> , может пользоваться возможностями плагина <i style=\"color: orange;\">target</i> и прыгать по меткам внутри текущей главы",
        "term": "nav10.yaml"
      },
      {
        "$": "Так же есть возможность заблокировать какой либо пункт меню. Для этого необходимо использовать ключевое слово <i style=\"color: darkcyan;\">dissabled</i>",
        "term": "nav11.yaml"
      },
      "Плагин <i style=\"color: orange;\"> внутри одной \"строки\" / объекта контекста не может именть одинаковых ключевых слов</i>, поэтому к ключевому слову dissabled можно добавить любой префикс.",
      {
        "$": "Так же возможно использовать плагин <i style=\"color: magenta;\">next</i> внутри меню. Этот плагин делает прыжок на следующую строку и выполняет её",
        "term": "nav12.yaml"
      },
      "<i style=\"color: magenta;\">next</i> можно использовать независимо от меню.",
      {
        "$": "Свойство <i style=\"color: red;\">onCLick</i> принимает объект для выполнения после совершения прыжка.",
        "term": "nav13.yaml"
      },
      "Допустим вы скрываете диалоговое окно, когда отображается меню.",
      "И если совершать прыжок во все пункты меню, то в каждом из них нужно будет заново отобразить диалоговое окно",
      "Но этого можно избежать, если в свойстве <i style=\"color: red;\">onCLick</i> будут пропысаны необходимые команды",
      {
        "ex": "Сейчас будет выполнен код. Проследите за его выполнением",
        "term": "nav6.yaml"
      },
      "Ночь, улица, фонарь, аптека,",
      "Бессмысленный и тусклый свет.",
      "Живи еще хоть четверть века —",
      "Все будет так. Исхода нет.",
      {
        "dialog-box": false,
        "term": false,
        "scene": "earch",
        "menu": {
          "planets.luna": "Отправиться на Луну",
          "planets.mars": "Лучше на Марс"
        }
      }
    ],
    "scenesAndLabels": [
      {
        "$": "Итак, мы добрались до каталога <i style=\"color: red\">./src/scenes</i>"
      },
      {
        "$": " Давайте представим, что папка <i style=\"color: red\">./src/scenes</i> является своеобразной книжной полкой",
        "term": "library"
      },
      {
        "$": "В которой размещено несколько книг.",
        "term": "scenes1.yaml"
      },
      {
        "$": "По своей структуре книга делится на главы."
      },
      {
        "$": "Каждая книга может содержать несколько глав.",
        "term": "scenes2.yaml"
      },
      "Можно сказать, что книга - это папка для глав",
      {
        "$": "В данный момент внутри папки <i style=\"color: red\">./src/scenes</i> существует пока только одна папка <i style=\"color: magenta\">$root</i> и есть одна глава   <i style=\"color: orange\">$init</i>",
        "term": "scenes3.yaml"
      },
      "Говоря грубо, это и есть наша первая книга. Внутри которой размещаются главы.",
      {
        "$": "Разумеется глав можно добавлять сколько угодно, как и книг.",
        "term": "scenes31.yaml"
      },
      "Главу <i style=\"color: purple;\">$root/$init.yaml</i> удалять не рекомендуется. Так как она является точкой входа в приложение",
      {
        "$": "В данный момент у нас есть одна глава   <i style=\"color: orange\">$init</i>,  если мы её откроем, то мы увидим структуру изображенную в проекторе",
        "term": "scenes4.yaml"
      },
      "Собственно внутри глав находятся <i style=\"color: red\">YAML</i> скрипты. В которые записываются комады для выполнения",
      {
        "$": "Глава - является массивом данных. Каждый отдельный элемент этого массива разделяется символом <i style=\"color: darkcyan;\">-</i> тире"
      },
      "Элемент массива может являтся либо <i style=\"color: orange;\">строкой</i> либо <i style=\"color: darkcyan;\">объектом</i>",
      "Кликая мышкой по диалоговому окну, мы можем перемещаться по этому массиву только вперёд.",
      "<i style=\"color: orange;\">Строка</i> или <i style=\"color: darkcyan;\">объект</i> отображаемый в текущим момент времени называется объектом контекста",
      {
        "ex": "Сейчас будет выполнен код. Проследите за его ходом выполнения"
      },
      {
        "dialog-box": false,
        "timeout": {
          "timer": 1000,
          "exec": {
            "dialog-box": true,
            "next": true
          }
        }
      },
      "У лукоморья дуб зелёный;",
      "Златая цепь на дубе том",
      "И днём и ночью кот учёный",
      "Всё ходит по цепи кругом;",
      "Идёт направо — песнь заводит,",
      "Налево — сказку говорит.",
      "Там чудеса там леший бродит,",
      "Русалка на ветвях сидит;",
      {
        "$": "Позиция внутри массива начинается с <i style=\"color: magenta;\">нуля 0</i>",
        "term": false
      },
      {
        "ex": "Сейчас будет выполнен код. Проследите за его ходом выполнения"
      },
      {
        "$": "test 0",
        "term": "nav4_0.yaml"
      },
      {
        "$": "test 1",
        "term": "nav4_1.yaml"
      },
      {
        "$": "test 2",
        "term": "nav4_2.yaml"
      },
      {
        "$": "test 3",
        "term": "nav4_3.yaml"
      },
      {
        "$": "test 4",
        "term": "nav4_4.yaml"
      },
      {
        "$": "test 5",
        "term": "nav4_5.yaml"
      },
      {
        "$": "Так же желательно создать в корне файл <i style=\"color: red;\">package.yaml</i> где указать дополнительную информацию",
        "term": "scenes5.yaml"
      },
      {
        "$": "В параметре <i style=\"color: gold;\">name</i> указывается название вашего проекта"
      },
      {
        "$": "Параметр <i style=\"color: lightgreen;\">debug</i> отображает дополнительные панели, для помощи при работе с движком"
      },
      {
        "$": "Параметр <i style=\"color: magenta\">preload</i> включает предзагрузку изображений в начале игры"
      },
      {
        "jump": "$root.$init"
      }
    ],
    "setup": [
      {
        "$": "Что бы начать работать с движком <i style=\"color:darkcyan;\">mcvnjson</i> необходимо в терминале, перейти в рабочую папку и выполнить команду приведённую на экране",
        "term": "setup1.yaml"
      },
      "Которая загрузит шаблон для вашего учебного пособия",
      {
        "$": "Откройте скачаный шаблон, там где распологается его корень. А он располагается там где расположен файл <i style=\"color: red; font-femaly: Consolas;\">package.json</i>",
        "term": "setup2.yaml"
      },
      {
        "$": "Далее необходимо установить зависимости. При помощи менеджера модулей <i style=\"color: brown\">npm</i>, который уже предустановлен в вашей системе",
        "term": "setup3.yaml"
      },
      {
        "$": "После чего необходимо переименовать файл  <i style=\"color: red;\">9000</i> в номер порта, который раздаёт запущеная вами операционная система",
        "slide": "port",
        "term": false
      },
      "Номер порта можно узнать подойдя к системногу блоку и заглянуть в него.",
      {
        "$": "В одном из слотов должна находиться <i style=\"color: magenta\">метка</i>",
        "slide": "tag-port"
      },
      {
        "$": "Название метки - это та цифра, которую необходимо прибавить к числу <i style=\"color: orange;\">9000</i>",
        "slide": "tag-n"
      },
      "<i style=\"color: orange;\">9000</i> <i style=\"color: #8020df0;\">+</i> <i style=\"color: magenta;\">1</i> = <i style=\"color: red;\">9001</i>",
      "Результатом этой математической операции станет число, которое является портом раздаваемым запущеной вами операционной системом <i style=\"color: red;\">ubuntu</i>",
      {
        "$": "Далее необходимо переименовать файл <i style=\"color: magenta;\">9000</i>, который находится в корне проекта в номер порта который вы вычислили",
        "slide": "port"
      },
      {
        "$": "Сделать это можно командой  <i style=\"color: red;\">mv</i>",
        "term": "setup_mv.yaml",
        "slide": false
      },
      {
        "$": "После чего нужно произвести запуск сборки поекта, выполнив команду <i style=\"color: red\">npm run dev</i>",
        "term": "setup4.yaml"
      },
      {
        "$": "Запусится локальный сервер  по адресу <i style=\"color: red;\">http://localhost:9001</i> где цифра <i style=\"color: magenta\">1</i> - это номер метки компьютера"
      },
      "Например, если в названии метки стоит число <i style=\"color: #00ff00\">7</i>, то наш адрес для запуска новелы будет <i style=\"color: gold;\">http://localhost:9007</i>",
      {
        "$": "Отвернёмся от терминала и сконструируем экран из  блоков <i style=\"color: magenta\">Web Displays</i> или поищем уже готовый",
        "term": false,
        "slide": "WebDisplays"
      },
      {
        "$": "Активируем его нажатием правой кнопкой мыши",
        "slide": "web-display-right-click"
      },
      "Далее нажатием сочетания клавиш Shift + Правая кнопка мыши, откроем интерфейс для ввода адреса сайта",
      {
        "$": "Пишем адрес на котором запустился наш проект  <i style=\"color: red;\">http://localhost:9001</i>",
        "slide": "location"
      },
      {
        "$": "Так же нам понадобится настроить созданный монитор при помощи специального инструмента",
        "slide": "configurator"
      },
      {
        "$": "Базовое разрешение для новелы 1024 x 768 , а в режиме разработки 1400 x 1080 . Убедитесь, что убрали галочку с пункта Lock ratio",
        "slide": "configurator-screen"
      },
      {
        "$": "Если всё прошло нормально, то вы увидите следующую картину.",
        "slide": "empty-project"
      },
      {
        "$": "Внутри проекта необходимо открыть папку <i style='color: pink'>./src/scenes</i>",
        "term": "setup5.yaml",
        "slide": false
      },
      {
        "$": "Это и есть рабочий каталог где будет происходить оснавная часть работы по созданию вашего проекта."
      },
      {
        "$": "После каждого сохранения измений в файлах внутри этой папки, проект будет автоматически пересобираться."
      },
      {
        "$": "Перечень команд которые необходимо было выполнить",
        "term": "setup6.yaml"
      },
      {
        "jump": "$root.$init"
      }
    ],
    "zim": [
      {
        "zim-intro": true
      },
      {
        "$": "zim - код подключается как независимый плагин",
        "term": "zim_0.yaml",
        "zim-intro": false
      },
      {
        "$": "Откройте папку plugins, скорипурей папку zim-intro и переименуйте. Разместите здесь же в каталоге plugins"
      },
      "Библиотеки  <i style=\"color: orange\">create.js</i> и <i style=\"color: gold\"zim.js</i>  уже подключены",
      {
        "$": "Теперь нам необходимо подключить только что созданый плагин",
        "term": "zim_0.js"
      },
      {
        "$": "Внутри нового плагина откройте файл <i style=\"color: lightgreen;\">zim.js </i>",
        "term": "zim_1.js"
      },
      {
        "$": "В переменную <i style=\"color: magenta\">event</i> записывается ключ по которому мы будет вызывать из <i style=\"color: red\">YAML</i> скрипта наш плагин"
      },
      "Обратите внимание что <i style=\"color: brown;\">window</i><i style=\"color: darkcyan\">.</i><i style=\"color: orange\">frame</i> записывается как свойство обхекта window",
      {
        "jump": "$root.$init"
      }
    ]
  }
}